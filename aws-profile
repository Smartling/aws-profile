#!/usr/bin/env python

# This is a hack to setup environment variables for using Assume Role with other scripts that
# use them. AWS has a standard way of doing this, found here:
#
# http://docs.aws.amazon.com/cli/latest/topic/config-vars.html#using-aws-iam-roles
#
# This will work with any newer AWS SDK, but for older ones, it will not. This script is a work-around,
# utilizing the same config file options that the above uses, but to call for ourselves and setup
# environment variables as we need.
#
# Much code has been borrowed from:
#
# https://github.com/aws/aws-cli/blob/cba353fb6e6a4be8404fa909eb15a83bf1ce7843/awscli/customizations/assumerole.py


# History:
#
#
# 07/08/2016 - Move to boto3. Add MFA-Token configuration.
#
# In config-file for aws mfa_token should be specified for now. Does not work without MFA-Token
# .aws/config 
#     [profile profile-name]
#     output = json
#     region = us-east-1
#     role_arn = arn:aws:iam::XXXXXXXXXXXX:role/Admins
#     source_profile =  source-profile-name
#     mfa_serial = arn:aws:iam::XXXXXXXXXXXX:mfa/XXL@XXXXXXXXX.de

# TODO
#   parse argumenstm add --skip-mfa
#   validate mfa_token_number - 6 digits

import os
import sys
import json
import time
import boto3
import argparse


from dateutil.parser import parse
from dateutil.tz import tzlocal
from datetime import datetime

import botocore.session

CACHE_DIR = os.path.expanduser(os.path.join('~', '.aws', 'aws-profile', 'cache'))
EXPIRY_WINDOW_SECONDS = 3600

globalSkipMfa=False
globalDebug=False
globalQuiet=True


def get_args():
    # Get arguments from command line
    parser = argparse.ArgumentParser(description='Wrapper script to generate & pass AWS AssumeRole keys to other scripts')
    # Add arguments
    parser.add_argument('-p','--profile', type=str, help='Assume-Role profile',required=True)
    parser.add_argument('-c','--command', type=str, help='Command to execute',required=True)
    parser.add_argument('-m','--mfa', type=str, help='MFA token to authenticate',required=False)
    parser.add_argument('-s','--skipmfa', help='Skip usage of MFA',default=False, action='store_true')
    parser.add_argument('-d','--debug', help='Debug information',default=False, action='store_true')

    args = parser.parse_args()
    # Get args to variables
    profile = args.profile.strip()
    command = args.command.strip()
    mfakey= args.mfa
    skipmfa = args.skipmfa
    return (profile, command, skipmfa, mfakey)
    

def parse_args(argv=sys.argv):
    if len(argv) < 3:
        print("Please provide the name of the profile to connect with, and the command to run.")
        print("Example: %s profile 'aws s3 ls'" % os.path.basename(argv[0]))
        quit(1)

    profile = argv[1]
    command = " ".join(argv[2:])
    skipmfa = False
    mfakey = None
    return (profile, command, skipmfa, mfakey)


def read_config():
    # This reads our config files automatically, and combines config and credentials files for us
    profiles = botocore.session.get_session().full_config.get('profiles', {})

    # Checks for the passed in profile, mostly for sanity
    if profile not in profiles:
        print "Profile '%s' does not exist in the config file." % profile
        quit(2)

    if 'role_arn' not in profiles[profile]:
        print "Profile '%s' does not have role_arn." % profile
        quit(3)

    return profiles[profile]


def load_creds_from_cache(key_path):
    try:
        with open(key_path) as f:
            return json.load(f)
    except (OSError, ValueError, IOError):
        # This is fine, just means we will use STS to pull new keys
        return None


def save_creds_to_cache(key_path, creds):
    file_content = json.dumps(creds)
    if not os.path.isdir(os.path.dirname(key_path)):
        os.makedirs(os.path.dirname(key_path))
    with os.fdopen(os.open(key_path, os.O_WRONLY | os.O_CREAT, 0o600), 'w') as f:
        f.write(file_content)


def create_cache_key(config):
    role_arn = config['role_arn'].replace(':', '_')
    role_session_name = config.get('role_session_name')
    if role_session_name:
        cache_key = '%s--%s--%s' % (profile, role_arn, role_session_name)
    else:
        cache_key = '%s--%s' % (profile, role_arn)

    return cache_key.replace('/', '-')


def get_creds_from_sts(key_path):
    # Generates our new set of credentials to use on the command line.
    # Duration is as low as possibly (15 minutes) as cli things shouldn't run for
    # Longer than that, and the max is 1 hour anyway

    skipmfa = False

    if 'mfa_serial' not in config:
        skipmfa = True

    if not skipmfa:
        if mfakey is None:
           # Get your MFA Token
           mfaToken = raw_input("Put your MFA-Token here =>")
        else:
	   mfaToken = mfakey.strip()

    session = boto3.Session( profile_name=config.get('source_profile') )
    sts_connection = session.client('sts')

    role_session_name = config.get('role_session_name')

    if not role_session_name:
        role_session_name = 'AWS-Profile-session-%s' % (int(time.time()))

    if not globalQuiet:
       print("=======================================================")
       print("=> Assuming role .... : %s " % config['role_arn'])
       print("==> Source Profile .. : %s " % config.get('source_profile') )


       if not skipmfa:
           print("==> MFA Serial ...... : %s " % config['mfa_serial']  )
           print("==> MFA Token ....... : %s " % str(mfaToken)  )
       else:
           print("==> Skip MFA ........ : %s " % str(skipmfa)  )

       print("==> Session: ........ : %s " % role_session_name )
       print("=======================================================")

    if not skipmfa:
        assumedRoleObject = sts_connection.assume_role(
            RoleArn=config['role_arn'],
            RoleSessionName=role_session_name,
            DurationSeconds=3600,
            SerialNumber=config['mfa_serial'],
            TokenCode=str(mfaToken)
        )
    else:
        assumedRoleObject = sts_connection.assume_role(
            RoleArn=config['role_arn'],
            RoleSessionName=role_session_name,
            DurationSeconds=3600
        )

    credentials = assumedRoleObject['Credentials']

    creds = {
        'access_key' : credentials['AccessKeyId'],
        'secret_key' : credentials['SecretAccessKey'],
        'session_token' : credentials['SessionToken'],
        'expiration' : str(credentials['Expiration'])
    }

    # Save the creds to the cache file
    save_creds_to_cache(key_path, creds)

    return creds


def is_creds_valid(creds):
    end_time = parse(creds['expiration'])
    now = datetime.now(tzlocal())
    return now <= end_time


def load_creds():
    cache_key = create_cache_key(config)
    full_path = os.path.join(CACHE_DIR, cache_key + '.json')

    creds = load_creds_from_cache(full_path)

    if creds is None or not is_creds_valid(creds):
        creds = get_creds_from_sts(full_path)
    return creds


# ----------------------------------------------
#
# Start Main Script main()
#
# ----------------------------------------------


# profile, command, skipmfa, mfakey = get_args()


profile, command, skipmfa, mfakey = parse_args()

config = read_config()
creds = load_creds()

# Unset variables for sanity sake
os.unsetenv('AWS_ACCESS_KEY_ID')
os.unsetenv('AWS_SECRET_ACCESS_KEY')
os.unsetenv('AWS_SESSION_TOKEN')
os.unsetenv('AWS_DEFAULT_PROFILE')
os.unsetenv('AWS_PROFILE')

if 'region' in config:
    os.putenv('AWS_DEFAULT_REGION', config['region'])
    os.putenv('AWS_REGION', config['region'])

os.putenv('AWS_ACCESS_KEY_ID', creds['access_key'])
os.putenv('AWS_SECRET_ACCESS_KEY', creds['secret_key'])
os.putenv('AWS_SESSION_TOKEN', creds['session_token'])

my_env = os.environ.copy()

if not globalQuiet:
   print("=======================================================")
   print("Executing system command %s, waiting for output" %command )
   print("=======================================================")

command_status = os.system(command)
if not globalQuiet:
   print("=======================================================")

exit(os.WEXITSTATUS(command_status))
